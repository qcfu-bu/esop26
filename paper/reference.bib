@phdthesis{norell07,
  author  = {Ulf Norell},
  title	  = {Towards a practical programming language based on dependent type theory},
  school  = {Department of Computer Science and Engineering, Chalmers University of Technology},
  year	  = 2007,
  month	  = {September},
  address = {SE-412 96 G\"{o}teborg, Sweden}
}

@online{agda,
  title  = {Agda 2.6.4 documentation},
  author = {{Agda development team}},
  year   = 2023,
  url    = {https://agda.readthedocs.io/en/v2.6.4}
}

@thesis{barras,
  title  = {Semantical Investigations in Intuitionistic Set Theory and Type Theories with Inductive Families},
  author = {Bruno Barras},
  year   = {2012}
}

@online{ats,
  author = {Hongwei Xi},
  title  = {The ATS Programming Language},
  year   = 2010,
  url    = {http://www.ats-lang.org/}
}

@inproceedings{autosubst,
  title     = {Autosubst: Reasoning with de Bruijn Terms and Parallel Substitutions},
  author    = {Steven Schäfer and Tobias Tebbi and Gert Smolka},
  year      = {2015},
  month     = {Aug},
  editor    = {Xingyuan Zhang and Christian Urban},
  publisher = {Springer-Verlag},
  booktitle = {Interactive Theorem Proving - 6th International Conference, {ITP} 2015, Nanjing, China, August 24-27, 2015},
  series    = {LNAI}
}

@article{bedrock,
  author     = {Chlipala, Adam},
  title      = {Mostly-Automated Verification of Low-Level Programs in Computational Separation Logic},
  year       = {2011},
  issue_date = {June 2011},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {46},
  number     = {6},
  issn       = {0362-1340},
  url        = {https://doi.org/10.1145/1993316.1993526},
  doi        = {10.1145/1993316.1993526},
  journal    = {SIGPLAN Not.},
  month      = jun,
  pages      = {234–245},
  numpages   = {12},
  keywords   = {separation logic, functional programming, low-level programming languages, interactive proof assistants}
}

@inproceedings{benton1994,
  title     = {A Mixed Linear and Non-Linear Logic: Proofs, Terms and Models (Extended Abstract)},
  author    = {Nick Benton},
  booktitle = {CSL},
  year      = {1994}
}

@article{cbvsemantics,
  title   = {The call-by-value $\lambda$-calculus: a semantic investigation},
  author  = {Alberto Pravato and S. D. Rocca and L. Roversi},
  journal = {Mathematical Structures in Computer Science},
  year    = {1999},
  volume  = {9},
  pages   = {617-650}
}

@article{cc,
  title   = {The calculus of constructions},
  journal = {Information and Computation},
  volume  = {76},
  number  = {2},
  pages   = {95-120},
  year    = {1988},
  issn    = {0890-5401},
  doi     = {https://doi.org/10.1016/0890-5401(88)90005-3},
  url     = {https://www.sciencedirect.com/science/article/pii/0890540188900053},
  author  = {Thierry Coquand and Gérard Huet}
}

@inproceedings{cic,
  author    = {Paulin-Mohring, Christine},
  editor    = {Bezem, Marc
               and Groote, Jan Friso},
  title     = {Inductive definitions in the system Coq rules and properties},
  booktitle = {Typed Lambda Calculi and Applications},
  year      = {1993},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {328--345},
  isbn      = {978-3-540-47586-6}
}

@inproceedings{compcert,
  title        = {{CompCert - A Formally Verified Optimizing Compiler}},
  author       = {Leroy, Xavier and Blazy, Sandrine and K{\"a}stner, Daniel and Schommer, Bernhard and Pister, Markus and Ferdinand, Christian},
  url          = {https://hal.inria.fr/hal-01238879},
  booktitle    = {{ERTS 2016: Embedded Real Time Software and Systems, 8th European Congress}},
  address      = {Toulouse, France},
  organization = {{SEE}},
  year         = {2016},
  month        = Jan,
  pdf          = {https://hal.inria.fr/hal-01238879/file/erts2016_compcert.pdf},
  hal_id       = {hal-01238879},
  hal_version  = {v1}
}

@manual{coq,
  author   = {{The Coq Development Team}},
  doi      = {10.5281/ZENODO.3744225},
  keywords = {formal proofs,mathematical software,proof assistant},
  month    = {jan},
  title    = {{The Coq Proof Assistant, version 8.11.0}},
  year     = {2020}
}

@article{deepspec,
  author  = {Appel, Andrew and Beringer, Lennart and Chlipala, Adam and Pierce, Benjamin and Shao, Zhong and Weirich, Stephanie and Zdancewic, S.},
  year    = {2017},
  month   = {10},
  pages   = {20160331},
  title   = {Position paper: the science of deep specification},
  volume  = {375},
  journal = {Philosophical Transactions of The Royal Society A Mathematical Physical and Engineering Sciences},
  doi     = {10.1098/rsta.2016.0331}
}

@book{ecc,
  author    = {Luo, Zhaohui},
  title     = {Computation and Reasoning: A Type Theory for Computer Science},
  year      = {1994},
  isbn      = {0198538359},
  publisher = {Oxford University Press, Inc.},
  address   = {USA}
}

@article{everest,
  author     = {Jonathan Protzenko and
                Jean Karim Zinzindohou{\'{e}} and
                Aseem Rastogi and
                Tahina Ramananandro and
                Peng Wang and
                Santiago Zanella B{\'{e}}guelin and
                Antoine Delignat{-}Lavaud and
                Catalin Hritcu and
                Karthikeyan Bhargavan and
                C{\'{e}}dric Fournet and
                Nikhil Swamy},
  title      = {Verified Low-Level Programming Embedded in F\({}^{\mbox{*}}\)},
  journal    = {CoRR},
  volume     = {abs/1703.00053},
  year       = {2017},
  url        = {http://arxiv.org/abs/1703.00053},
  eprinttype = {arXiv},
  eprint     = {1703.00053},
  timestamp  = {Thu, 19 Nov 2020 13:24:26 +0100},
  biburl     = {https://dblp.org/rec/journals/corr/BhargavanDFHPRR17.bib},
  bibsource  = {dblp computer science bibliography, https://dblp.org}
}

@misc{fstar,
  author       = {Nikhil Swamy and
                  Catalin Hri\c{t}cu and
                  Chantal Keller and
                  Aseem Rastogi and
                  Antoine Delignat-Lavaud and
                  Simon Forest and
                  Karthikeyan Bhargavan and
                  Cédric Fournet and
                  Pierre-Yves Strub and
                  Markulf Kohlweiss and 
                  Jean-Karim Zinzindohoue},
  title        = {Dependent Types and Multi-Monadic Effects in {F*}},
  url          = {https://www.fstar-lang.org/papers/mumon/},
  year         = {2015},
  month        = jul,
  howpublished = {Draft}
}

@article{girard,
  title   = {Linear logic},
  journal = {Theoretical Computer Science},
  volume  = {50},
  number  = {1},
  pages   = {1-101},
  year    = {1987},
  issn    = {0304-3975},
  doi     = {https://doi.org/10.1016/0304-3975(87)90045-4},
  author  = {Jean-Yves Girard}
}

@article{htt,
  author     = {Nanevski, Aleksandar and Morrisett, Greg and Birkedal, Lars},
  title      = {Polymorphism and Separation in Hoare Type Theory},
  year       = {2006},
  issue_date = {September 2006},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {41},
  number     = {9},
  issn       = {0362-1340},
  url        = {https://doi.org/10.1145/1160074.1159812},
  doi        = {10.1145/1160074.1159812},
  journal    = {SIGPLAN Not.},
  month      = sep,
  pages      = {62–73},
  numpages   = {12},
  keywords   = {hoare logic, separation logic, type theory}
}

@article{idris2,
  author     = {Edwin C. Brady},
  title      = {Idris 2: Quantitative Type Theory in Practice},
  journal    = {CoRR},
  volume     = {abs/2104.00480},
  year       = {2021},
  url        = {https://arxiv.org/abs/2104.00480},
  eprinttype = {arXiv},
  eprint     = {2104.00480},
  timestamp  = {Mon, 12 Apr 2021 16:14:56 +0200},
  biburl     = {https://dblp.org/rec/journals/corr/abs-2104-00480.bib},
  bibsource  = {dblp computer science bibliography, https://dblp.org}
}

@article{inductive,
  author  = {Peter Dybjer},
  title   = {Inductive Families},
  journal = {Formal Aspects of Computing},
  year    = {1997},
  volume  = {6},
  pages   = {440--465}
}

@inproceedings{l3,
  author    = {Morrisett, Greg
               and Ahmed, Amal
               and Fluet, Matthew},
  editor    = {Urzyczyn, Pawe{\l}},
  title     = {L3: A Linear Language with Locations},
  booktitle = {Typed Lambda Calculi and Applications},
  year      = {2005},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {293--307},
  isbn      = {978-3-540-32014-2}
}

@article{ldqt,
  author     = {Peng Fu and
                Kohei Kishida and
                Peter Selinger},
  title      = {Linear Dependent Type Theory for Quantum Programming Languages},
  journal    = {CoRR},
  volume     = {abs/2004.13472},
  year       = {2020},
  url        = {https://arxiv.org/abs/2004.13472},
  eprinttype = {arXiv},
  eprint     = {2004.13472},
  timestamp  = {Thu, 23 Jul 2020 16:22:11 +0200},
  biburl     = {https://dblp.org/rec/journals/corr/abs-2004-13472.bib},
  bibsource  = {dblp computer science bibliography, https://dblp.org}
}

@article{llf,
  title    = {A Linear Logical Framework},
  journal  = {Information and Computation},
  volume   = {179},
  number   = {1},
  pages    = {19-75},
  year     = {2002},
  issn     = {0890-5401},
  doi      = {https://doi.org/10.1006/inco.2001.2951},
  url      = {https://www.sciencedirect.com/science/article/pii/S0890540101929517},
  author   = {Iliano Cervesato and Frank Pfenning},
  abstract = {We present the linear type theory λΠ⊸&⊤ as the formal basis for LLF, a conservative extension of the logical framework LF. LLF combines the expressive power of dependent types with linear logic to permit the natural and concise representation of a whole new class of deductive systems, namely those dealing with state. As an example we encode a version of Mini-ML with mutable references including its type system and its operational semantics and describe how to take practical advantage of the representation of its computations.}
}

@inbook{luo,
  title     = {A Linear Dependent Type Theory},
  author    = {Zhaohui Luo and Y Zhang},
  year      = {2016},
  month     = may,
  language  = {English},
  pages     = {69--70},
  booktitle = {TYPES 2016}
}

@incollection{martinlof,
  title     = {An Intuitionistic Theory of Types: Predicative Part},
  editor    = {H.E. Rose and J.C. Shepherdson},
  series    = {Studies in Logic and the Foundations of Mathematics},
  publisher = {Elsevier},
  volume    = {80},
  pages     = {73-118},
  year      = {1975},
  booktitle = {Logic Colloquium '73},
  issn      = {0049-237X},
  doi       = {https://doi.org/10.1016/S0049-237X(08)71945-1},
  url       = {https://www.sciencedirect.com/science/article/pii/S0049237X08719451},
  author    = {Per Martin-Löf},
}

@article{neel15,
  author     = {Krishnaswami, Neelakantan R. and Pradic, Pierre and Benton, Nick},
  title      = {Integrating Linear and Dependent Types},
  year       = {2015},
  issue_date = {January 2015},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {50},
  number     = {1},
  issn       = {0362-1340},
  url        = {https://doi.org/10.1145/2775051.2676969},
  doi        = {10.1145/2775051.2676969},
  journal    = {SIGPLAN Not.},
  month      = jan,
  pages      = {17–30},
  numpages   = {14},
  keywords   = {dependent types, intersection types, linear types, separation logic, proof irrelevance, hoare triples}
}

@inproceedings{nothing,
  title     = {I Got Plenty o' Nuttin'},
  author    = {Conor McBride},
  booktitle = {A List of Successes That Can Change the World},
  year      = {2016}
}

@inproceedings{pattern,
  title  = {Pattern Matching with Dependent Types},
  author = {Thierry Coquand},
  year   = {1992}
}

@inproceedings{qtt,
  title     = {The Syntax and Semantics of Quantitative Type Theory},
  author    = {Robert Atkey},
  year      = {2018},
  doi       = {10.1145/3209108.3209189},
  booktitle = {LICS '18: 33rd Annual ACM/IEEE Symposium on Logic in Computer Science, July 9--12, 2018, Oxford, United Kingdom}
}

@techreport{substitute,
  title  = {There's No Substitute for Linear Logic},
  author = {P. Wadler},
  year   = {1991}
}

@inproceedings{trellys,
  title     = {Irrelevance, Heterogeneous Equality, and Call-by-value Dependent Type Systems},
  author    = {Vilhelm Sj{\"o}berg and Chris Casinghino and Ki Yung Ahn and Nathan Collins and H. Eades and Peng Fu and Garrin Kimmell and T. Sheard and Aaron Stump and Stephanie Weirich},
  booktitle = {MSFP},
  year      = {2012}
}

@inproceedings{wadler1990,
  title     = {Linear Types can Change the World!},
  author    = {P. Wadler},
  booktitle = {Programming Concepts and Methods},
  year      = {1990}
}

@article{wadler1991,
  author     = {Wadler, Philip},
  title      = {Is There a Use for Linear Logic?},
  year       = {1991},
  issue_date = {Sept. 1991},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {26},
  number     = {9},
  issn       = {0362-1340},
  url        = {https://doi.org/10.1145/115866.115894},
  doi        = {10.1145/115866.115894},
  journal    = {SIGPLAN Not.},
  month      = may,
  pages      = {255–273},
  numpages   = {19}
}

@inproceedings{lean,
  author    = {de Moura, Leonardo
               and Kong, Soonho
               and Avigad, Jeremy
               and van Doorn, Floris
               and von Raumer, Jakob},
  editor    = {Felty, Amy P.
               and Middeldorp, Aart},
  title     = {The Lean Theorem Prover (System Description)},
  booktitle = {Automated Deduction - CADE-25},
  year      = {2015},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {378--388},
  abstract  = {Lean is a new open source theorem prover being developed at Microsoft Research and Carnegie Mellon University, with a small trusted kernel based on dependent type theory. It aims to bridge the gap between interactive and automated theorem proving, by situating automated tools and methods in a framework that supports user interaction and the construction of fully specified axiomatic proofs. Lean is an ongoing and long-term effort, but it already provides many useful components, integrated development environments, and a rich API which can be used to embed it into other systems. It is currently being used to formalize category theory, homotopy type theory, and abstract algebra. We describe the project goals, system architecture, and main features, and we discuss applications and continuing work.},
  isbn      = {978-3-319-21401-6}
}

@article{linear-haskell,
  author     = {Jean{-}Philippe Bernardy and
                Mathieu Boespflug and
                Ryan R. Newton and
                Simon Peyton Jones and
                Arnaud Spiwack},
  title      = {Linear Haskell: practical linearity in a higher-order polymorphic
                language},
  journal    = {CoRR},
  volume     = {abs/1710.09756},
  year       = {2017},
  url        = {http://arxiv.org/abs/1710.09756},
  eprinttype = {arXiv},
  eprint     = {1710.09756},
  timestamp  = {Mon, 13 Aug 2018 16:47:41 +0200},
  biburl     = {https://dblp.org/rec/journals/corr/abs-1710-09756.bib},
  bibsource  = {dblp computer science bibliography, https://dblp.org}
}

@article{lf,
  author     = {Harper, Robert and Honsell, Furio and Plotkin, Gordon},
  title      = {A Framework for Defining Logics},
  year       = {1993},
  issue_date = {Jan. 1993},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {40},
  number     = {1},
  issn       = {0004-5411},
  url        = {https://doi.org/10.1145/138027.138060},
  doi        = {10.1145/138027.138060},
  journal    = {J. ACM},
  month      = jan,
  pages      = {143–184},
  numpages   = {42},
  keywords   = {interactive theorem proving, formal systems, typed lambda calculus, proof checking}
}

@article{vakar14,
  author     = {Matthijs V{\'{a}}k{\'{a}}r},
  title      = {Syntax and Semantics of Linear Dependent Types},
  journal    = {CoRR},
  volume     = {abs/1405.0033},
  year       = {2014},
  url        = {http://arxiv.org/abs/1405.0033},
  eprinttype = {arXiv},
  eprint     = {1405.0033},
  timestamp  = {Mon, 13 Aug 2018 16:48:19 +0200},
  biburl     = {https://dblp.org/rec/journals/corr/Vakar14.bib},
  bibsource  = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{girard95,
  title  = {Linear logic: its syntax and semantics},
  author = {Jean-Yves Girard},
  year   = {1995}
}

@inproceedings{mazurak,
  author    = {Karl Mazurak and
               Jianzhou Zhao and
               Steve Zdancewic},
  editor    = {Andrew Kennedy and
               Nick Benton},
  title     = {Lightweight linear types in system fdegree},
  booktitle = {Proceedings of {TLDI} 2010: 2010 {ACM} {SIGPLAN} International Workshop
               on Types in Languages Design and Implementation, Madrid, Spain, January
               23, 2010},
  pages     = {77--88},
  publisher = {{ACM}},
  year      = {2010},
  url       = {https://doi.org/10.1145/1708016.1708027},
  doi       = {10.1145/1708016.1708027},
  timestamp = {Tue, 06 Nov 2018 16:58:22 +0100},
  biburl    = {https://dblp.org/rec/conf/tldi/MazurakZZ10.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{takahashi,
  author     = {Takahashi, M.},
  title      = {Parallel Reductions in $\lambda$-Calculus},
  year       = {1995},
  issue_date = {April 1995},
  publisher  = {Academic Press, Inc.},
  address    = {USA},
  volume     = {118},
  number     = {1},
  issn       = {0890-5401},
  url        = {https://doi.org/10.1006/inco.1995.1057},
  doi        = {10.1006/inco.1995.1057},
  journal    = {Inf. Comput.},
  month      = apr,
  pages      = {120–127},
  numpages   = {8}
}

@article{iris,
  author     = {Jung, Ralf and Swasey, David and Sieczkowski, Filip and Svendsen, Kasper and Turon, Aaron and Birkedal, Lars and Dreyer, Derek},
  title      = {Iris: Monoids and Invariants as an Orthogonal Basis for Concurrent Reasoning},
  year       = {2015},
  issue_date = {January 2015},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {50},
  number     = {1},
  issn       = {0362-1340},
  url        = {https://doi.org/10.1145/2775051.2676980},
  doi        = {10.1145/2775051.2676980},
  journal    = {SIGPLAN Not.},
  month      = jan,
  pages      = {637–650},
  numpages   = {14},
  keywords   = {compositional verification, fine-grained concurrency, invariants, atomicity, separation logic, partial commutative monoids, higher-order logic}
}

@techreport{dill,
  title       = {Dual Intuitionistic Linear Logic},
  author      = {Andrew G. Barber and Gordan Plotkin},
  institution = {Labrartory of Compute Science, Univerity of Edinburgh},
  year        = {1996}
}

@inproceedings{caires10,
  author = {Caires, Luís and Pfenning, Frank},
  year   = {2010},
  month  = {08},
  pages  = {222-236},
  title  = {Session Types as Intuitionistic Linear Propositions},
  isbn   = {978-3-642-15374-7},
  doi    = {10.1007/978-3-642-15375-4_16}
}

@article{tov11,
  author     = {Tov, Jesse A. and Pucella, Riccardo},
  title      = {Practical Affine Types},
  year       = {2011},
  issue_date = {January 2011},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {46},
  number     = {1},
  issn       = {0362-1340},
  url        = {https://doi.org/10.1145/1925844.1926436},
  doi        = {10.1145/1925844.1926436},
  journal    = {SIGPLAN Not.},
  month      = {jan},
  pages      = {447–458},
  numpages   = {12},
  keywords   = {affine types, modules, linear logic, type systems, polymorphism}
}

@article{benardy18,
  author     = {Bernardy, Jean-Philippe and Boespflug, Mathieu and Newton, Ryan R. and Peyton Jones, Simon and Spiwack, Arnaud},
  title      = {Linear Haskell: Practical Linearity in a Higher-Order Polymorphic Language},
  year       = {2017},
  issue_date = {January 2018},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {2},
  number     = {POPL},
  url        = {https://doi.org/10.1145/3158093},
  doi        = {10.1145/3158093},
  journal    = {Proc. ACM Program. Lang.},
  month      = {dec},
  articleno  = {5},
  numpages   = {29},
  keywords   = {typestate, laziness, GHC, Haskell, linear logic, linear types, polymorphism}
}

@article{dml,
  title     = {Dependent ML An approach to practical programming with dependent types},
  volume    = {17},
  doi       = {10.1017/S0956796806006216},
  number    = {2},
  journal   = {Journal of Functional Programming},
  publisher = {Cambridge University Press},
  author    = {Xi, Hongwei},
  year      = {2007},
  pages     = {215–286}
}

@inproceedings{coquandP88,
  author    = {Thierry Coquand and
               Christine Paulin},
  editor    = {Per Martin{-}L{\"{o}}f and
               Grigori Mints},
  title     = {Inductively defined types},
  booktitle = {COLOG-88, International Conference on Computer Logic, Tallinn, USSR,
               December 1988, Proceedings},
  series    = {Lecture Notes in Computer Science},
  volume    = {417},
  pages     = {50--66},
  publisher = {Springer},
  year      = {1988},
  url       = {https://doi.org/10.1007/3-540-52335-9\_47},
  doi       = {10.1007/3-540-52335-9\_47},
  timestamp = {Tue, 14 May 2019 10:00:39 +0200},
  biburl    = {https://dblp.org/rec/conf/colog/CoquandP88.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{dybjer97,
  author  = {Peter Dybjer},
  title   = {Inductive Families},
  journal = {Formal Aspects of Computing},
  year    = {1997},
  volume  = {6},
  pages   = {440--465}
}

@book{mltt,
  author    = {Per Martin{-}L{\"{o}}f},
  title     = {Intuitionistic type theory},
  series    = {Studies in proof theory},
  volume    = {1},
  publisher = {Bibliopolis},
  year      = {1984},
  isbn      = {978-88-7088-228-5},
  timestamp = {Thu, 19 Sep 2019 11:29:54 +0200},
  biburl    = {https://dblp.org/rec/books/daglib/0000395.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{turner99,
  title    = {Operational interpretations of linear logic},
  journal  = {Theoretical Computer Science},
  volume   = {227},
  number   = {1},
  pages    = {231-248},
  year     = {1999},
  issn     = {0304-3975},
  doi      = {https://doi.org/10.1016/S0304-3975(99)00054-7},
  url      = {https://www.sciencedirect.com/science/article/pii/S0304397599000547},
  author   = {David N. Turner and Philip Wadler},
  keywords = {Linear logic, Operational semantics, Call-by-value lambda calculus, Memory management},
  abstract = {Two different operational interpretations of intuitionistic linear logic have been proposed in the literature. The simplest interpretation recomputes non-linear values every time they are required. It has good memory-management properties, but is often dismissed as being too inefficient. Alternatively, one can memoize the results of evaluating non-linear values. This avoids any recomputation, but has weaker memory-management properties. Using a novel combination of type-theoretic and operational techniques we give a concise formal comparison of the two interpretations. Moreover, we show that there is a subset of linear logic where the two operational interpretations coincide. In this subset, which is sufficiently expressive to encode call-by-value lambda-calculus, we can have the best of both worlds: a simple and efficient implementation, and good memory-management properties.}
}

@inproceedings{honda93,
  title     = {Types for Dyadic Interaction},
  author    = {Kohei Honda},
  booktitle = {CONCUR},
  year      = {1993}
}

@inproceedings{mcbride00,
  author    = {Conor McBride},
  editor    = {Paul Callaghan and
               Zhaohui Luo and
               James McKinna and
               Robert Pollack},
  title     = {Elimination with a Motive},
  booktitle = {Types for Proofs and Programs, International Workshop, {TYPES} 2000,
               Durham, UK, December 8-12, 2000, Selected Papers},
  series    = {Lecture Notes in Computer Science},
  volume    = {2277},
  pages     = {197--216},
  publisher = {Springer},
  year      = {2000},
  url       = {https://doi.org/10.1007/3-540-45842-5\_13},
  doi       = {10.1007/3-540-45842-5\_13},
  timestamp = {Tue, 14 May 2019 10:00:42 +0200},
  biburl    = {https://dblp.org/rec/conf/types/McBride00.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@online{rust,
  author = {{The Rust teams}},
  title  = {Rust Programming Language},
  year   = 2022,
  url    = {http://www.rust-lang.org/}
}

@article{choudhury21,
author = {Choudhury, Pritam and Eades III, Harley and Eisenberg, Richard A. and Weirich, Stephanie},
title = {A Graded Dependent Type System with a Usage-Aware Semantics},
year = {2021},
issue_date = {January 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {POPL},
url = {https://doi.org/10.1145/3434331},
doi = {10.1145/3434331},
abstract = {Graded Type Theory provides a mechanism to track and reason about resource usage in type systems. In this paper, we develop GraD, a novel version of such a graded dependent type system that includes functions, tensor products, additive sums, and a unit type. Since standard operational semantics is resource-agnostic, we develop a heap-based operational semantics and prove a soundness theorem that shows correct accounting of resource usage. Several useful properties, including the standard type soundness theorem, non-interference of irrelevant resources in computation and single pointer property for linear resources, can be derived from this theorem. We hope that our work will provide a base for integrating linearity, irrelevance and dependent types in practical programming languages like Haskell.},
journal = {Proc. ACM Program. Lang.},
month = {jan},
articleno = {50},
numpages = {32},
keywords = {Irrelevance, quantitative reasoning, linearity, heap semantics}
}

@InProceedings{miquel01,
author="Miquel, Alexandre",
editor="Abramsky, Samson",
title="The Implicit Calculus of Constructions Extending Pure Type Systems with an Intersection Type Binder and Subtyping",
booktitle="Typed Lambda Calculi and Applications",
year="2001",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="344--359",
isbn="978-3-540-45413-7"
}

@InProceedings{barras08,
author="Barras, Bruno
and Bernardo, Bruno",
editor="Amadio, Roberto",
title="The Implicit Calculus of Constructions as a Programming Language with Dependent Types",
booktitle="Foundations of Software Science and Computational Structures",
year="2008",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="365--379",
abstract="In this paper, we show how Miquel's Implicit Calculus of Constructions (ICC) can be used as a programming language featuring dependent types. Since this system has an undecidable type-checking, we introduce a more verbose variant, called ICC* which fixes this issue. Datatypes and program specifications are enriched with logical assertions (such as preconditions, postconditions, invariants) and programs are decorated with proofs of those assertions. The point of using ICC* rather than the Calculus of Constructions (the core formalism of the Coq proof assistant) is that all of the static information (types and proof objects) is transparent, in the sense that it does not affect the computational behavior. This is concretized by a built-in extraction procedure that removes this static information. We also illustrate the main features of ICC* on classical examples of dependently typed programs.",
isbn="978-3-540-78499-9"
}

@inproceedings{thorsten07,
author = {Altenkirch, Thorsten and McBride, Conor and Swierstra, Wouter},
year = {2007},
month = {10},
pages = {57-68},
title = {Observational equality, now!},
journal = {PLPV'07: Proceedings of the 2007 Workshop on Programming Languages meets Program Verification},
doi = {10.1145/1292597.1292608}
}

@article{DH76,
  author={Diffie, W. and Hellman, M.},
  journal={IEEE Transactions on Information Theory}, 
  title={New directions in cryptography}, 
  year={1976},
  volume={22},
  number={6},
  pages={644-654},
  doi={10.1109/TIT.1976.1055638}
}

@article{RSA78,
author = {Rivest, R. L. and Shamir, A. and Adleman, L.},
title = {A Method for Obtaining Digital Signatures and Public-Key Cryptosystems},
year = {1978},
issue_date = {Feb. 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {21},
number = {2},
issn = {0001-0782},
url = {https://doi.org/10.1145/359340.359342},
doi = {10.1145/359340.359342},
journal = {Commun. ACM},
month = {feb},
pages = {120–126},
numpages = {7},
keywords = {privacy, message-passing, cryptography, factorization, electronic funds transfer, authentication, public-key cryptosystems, prime number, electronic mail, security, digital signatures}
}

@INPROCEEDINGS {Coquand06,
author = {T. Coquand and A. Spiwack},
booktitle = {21st Annual IEEE Symposium on Logic in Computer Science},
title = {A Proof of Strong Normalisation using Domain Theory},
year = {2006},
volume = {},
issn = {1043-6871},
pages = {307-316},
keywords = {null},
doi = {10.1109/LICS.2006.8},
url = {https://doi.ieeecomputersociety.org/10.1109/LICS.2006.8},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {aug}
}

@techreport{perceus,
  author      = {Reinking*, Alex and Xie*, Ningning and de Moura, Leonardo and Leijen, Daan},
  title       = {Perceus: Garbage Free Reference Counting with Reuse (Extended version)},
  institution = {Microsoft},
  year        = {2020},
  month       = {November},
  abstract    = {We introduce Perceus, an algorithm for precise reference counting with
                 reuse and specialization. Starting from a functional core language with
                 explicit control-flow, Perceus emits precise reference counting
                 instructions such that programs are _garbage free_, where only live
                 references are retained. This enables further optimizations,
                 like reuse analysis that allows for guaranteed in-place updates at
                 runtime. This in turn enables a novel programming paradigm that we call
                 _functional but in-place_ (FBIP). Much like tail-call optimization
                 enables writing loops with regular function calls, reuse analysis enables
                 writing in-place mutating algorithms in a purely functional way. We give
                 a novel formalization of reference counting in a linear resource
                 calculus, and prove that Perceus is sound and garbage free. We show
                 evidence that Perceus, as implemented in Koka, has good performance
                 and is competitive with other state-of-the-art memory collectors.},
  url         = {https://www.microsoft.com/en-us/research/publication/perceus-garbage-free-reference-counting-with-reuse/},
  number      = {MSR-TR-2020-42},
  note        = {(*) The first two authors contributed equally to this work. v4, 2021-06-07. Extended version of the PLDI'21 paper.}
}

@article{lorenzen23,
  author     = {Lorenzen, Anton and Leijen, Daan and Swierstra, Wouter},
  title      = {FP²: Fully in-Place Functional Programming},
  year       = {2023},
  issue_date = {August 2023},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {7},
  number     = {ICFP},
  url        = {https://doi.org/10.1145/3607840},
  doi        = {10.1145/3607840},
  abstract   = {As functional programmers we always face a dilemma: should we write purely functional code, or sacrifice purity for efficiency and resort to in-place updates? This paper identifies precisely when we can have the best of both worlds: a wide class of purely functional programs can be executed safely using in-place updates without requiring allocation, provided their arguments are not shared elsewhere. We describe a linear _fully in-place_ (FIP) calculus where we prove that we can always execute such functions in a way that requires no (de)allocation and uses constant stack space. Of course, such a calculus is only relevant if we can express interesting algorithms; we provide numerous examples of in-place functions on datastructures such as splay trees or finger trees, together with in-place versions of merge sort and quick sort. We also show how we can generically derive a map function over _any_ polynomial data type that is fully in-place. Finally, we have implemented the rules of the FIP calculus in the Koka language. Using the Perceus reference counting garbage collection, this implementation dynamically executes FIP functions in-place whenever possible.},
  journal    = {Proc. ACM Program. Lang.},
  month      = {aug},
  articleno  = {198},
  numpages   = {30},
  keywords   = {Tail Recursion Modulo Cons, FBIP}
}

@inproceedings{xi03,
author = {Xi, Hongwei and Chen, Chiyan and Chen, Gang},
title = {Guarded Recursive Datatype Constructors},
year = {2003},
isbn = {1581136285},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/604131.604150},
doi = {10.1145/604131.604150},
abstract = {We introduce a notion of guarded recursive (g.r.) datatype constructors, generalizing the notion of recursive datatypes in functional programming languages such as ML and Haskell. We address both theoretical and practical issues resulted from this generalization. On one hand, we design a type system to formalize the notion of g.r. datatype constructors and then prove the soundness of the type system. On the other hand, we present some significant applications (e.g., implementing objects, implementing staged computation, etc.) of g.r. datatype constructors, arguing that g.r. datatype constructors can have far-reaching consequences in programming. The main contribution of the paper lies in the recognition and then the formalization of a programming notion that is of both theoretical interest and practical use.},
booktitle = {Proceedings of the 30th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {224–235},
numpages = {12},
keywords = {guarded recursive datatype constructors},
location = {New Orleans, Louisiana, USA},
series = {POPL '03}
}

@inproceedings{chen05,
author = {Chen, Chiyan and Xi, Hongwei},
title = {Combining Programming with Theorem Proving},
year = {2005},
isbn = {1595930647},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1086365.1086375},
doi = {10.1145/1086365.1086375},
abstract = {Applied Type System (ATS) is recently proposed as a framework for designing and formalizing (advanced) type systems in support of practical programming. In ATS, the definition of type equality involves a constraint relation, which may or may not be algorithmically decidable. To support practical programming, we adopted a design in the past that imposes certain restrictions on the syntactic form of constraints so that some effective means can be found for solving constraints automatically. Evidently, this is a rather em ad hoc design in its nature. In this design, which we claim to be both novel and practical. Instead of imposing syntactical restrictions on constraints, we provide a means for the programmer to construct proofs that attest to the validity of constraints. In particular, we are to accommodate a programming paradigm that enables the programmer to combine programming with theorem proving. Also we present some concrete examples in support of the practicality of this design.},
booktitle = {Proceedings of the Tenth ACM SIGPLAN International Conference on Functional Programming},
pages = {66–77},
numpages = {12},
keywords = {theorem proving, applied type system, ATS, dependent types, proof erasure},
location = {Tallinn, Estonia},
series = {ICFP '05}
}

@inproceedings{zhu05,
  author = {Zhu, Dengping and Xi, Hongwei},
  title = {Safe Programming with Pointers through Stateful Views},
  year = {2005},
  isbn = {3540243623},
  publisher = {Springer-Verlag},
  address = {Berlin, Heidelberg},
  url = {https://doi.org/10.1007/978-3-540-30557-6\_8},
  doi = {10.1007/978-3-540-30557-6\_8},
  abstract = {The need for direct memory manipulation through pointers is essential in many applications. However, it is also commonly understood that the use (or probably misuse) of pointers is often a rich source of program errors. Therefore, approaches that can effectively enforce safe use of pointers in programming are highly sought after. ATS is a programming language with a type system rooted in a recently developed framework Applied Type System, and a novel and desirable feature in ATS lies in its support for safe programming with pointers through a novel notion of stateful views. In particular, even pointer arithmetic is allowed in ATS and guaranteed to be safe by the type system of ATS. In this paper, we give an overview of this feature in ATS, presenting some interesting examples based on a prototype implementation of ATS to demonstrate the practicality of safe programming with pointer through stateful views.},
  booktitle = {Proceedings of the 7th International Conference on Practical Aspects of Declarative Languages},
  pages = {83–97},
  numpages = {15},
  location = {Long Beach, CA},
  series = {PADL'05}
}

@misc{xi17,
  title         = {Applied Type System: An Approach to Practical Programming with Theorem-Proving}, 
  author        = {Hongwei Xi},
  year          = {2017},
  eprint        = {1703.08683},
  archivePrefix = {arXiv},
  primaryClass  = {cs.PL}
}

@book{introats,
  author    = {Xi, Hongwei},
  title     = {Introduction to Programming in ATS},
  year      = {2010},
  uri       = {http://ats-lang.github.io/DOCUMENT/INT2PROGINATS/PDF/main.pdf},
  publisher = {ATS Trustful Software, Inc.},
}

@inproceedings{wadler12,
   author = {Philip Wadler},
   title = {Propositions as Sessions},
   year = {2012},
   isbn = {9781450310543},
   publisher = {Association for Computing Machinery},
   address = {New York, NY, USA},
   url = {https://doi.org/10.1145/2364527.2364568},
   doi = {10.1145/2364527.2364568},
   booktitle = {Proceedings of the 17th ACM SIGPLAN International Conference on Functional Programming},
   pages = {273–286},
   numpages = {14},
   keywords = {lambda calculus, linear logic, pi calculus},
   location = {Copenhagen, Denmark},
   series = {ICFP '12}
}

@article{ldst,
author = {Thiemann, Peter and Vasconcelos, Vasco T.},
title = {Label-Dependent Session Types},
year = {2019},
issue_date = {January 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {POPL},
url = {https://doi.org/10.1145/3371135},
doi = {10.1145/3371135},
journal = {Proc. ACM Program. Lang.},
month = {dec},
articleno = {67},
numpages = {29},
keywords = {dependent types, linear types, session types}
}

@article{wu17,
  author    = {Hanwen Wu and
               Hongwei Xi},
  title     = {Dependent Session Types},
  journal   = {CoRR},
  volume    = {abs/1704.07004},
  year      = {2017},
  url       = {http://arxiv.org/abs/1704.07004},
  eprinttype = {arXiv},
  eprint    = {1704.07004},
  timestamp = {Mon, 13 Aug 2018 16:47:34 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/WuX17.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{toninho11,
author = {Toninho, Bernardo and Caires, Lu\'{\i}s and Pfenning, Frank},
title = {Dependent Session Types via Intuitionistic Linear Type Theory},
year = {2011},
isbn = {9781450307765},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2003476.2003499},
doi = {10.1145/2003476.2003499},
booktitle = {Proceedings of the 13th International ACM SIGPLAN Symposium on Principles and Practices of Declarative Programming},
pages = {161–172},
numpages = {12},
keywords = {type theory, process calculus},
location = {Odense, Denmark},
series = {PPDP '11}
}

@inproceedings{griffith13,
  title={LiquidPi: Inferrable Dependent Session Types},
  author={Dennis Griffith and Elsa L. Gunter},
  booktitle={NASA Formal Methods},
  year={2013}
}

@article{orchard16,
author = {Orchard, Dominic and Yoshida, Nobuko},
title = {Effects as Sessions, Sessions as Effects},
year = {2016},
issue_date = {January 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {51},
number = {1},
issn = {0362-1340},
url = {https://doi.org/10.1145/2914770.2837634},
doi = {10.1145/2914770.2837634},
journal = {SIGPLAN Not.},
month = {jan},
pages = {568–581},
numpages = {14},
keywords = {Concurrent Haskell, effect systems, PCF, type systems, session types, encoding}
}

@article{gay20,
  title={Duality of Session Types: The Final Cut},
  author={Simon J. Gay and Peter Thiemann and Vasco Thudichum Vasconcelos},
  journal={ArXiv},
  year={2020},
  volume={abs/2004.01322},
  pages={23-33}
}

@article{bernardi16,
author = {Bernardi, Giovanni and Hennessy, Matthew},
year = {2016},
month = {06},
pages = {},
title = {Using higher-order contracts to model session types},
volume = {12},
journal = {Logical Methods in Computer Science},
doi = {10.2168/LMCS-12(2:10)2016}
}

@inproceedings{lindley16,
author = {Lindley, Sam and Morris, J. Garrett},
title = {Talking Bananas: Structural Recursion for Session Types},
year = {2016},
isbn = {9781450342193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2951913.2951921},
doi = {10.1145/2951913.2951921},
booktitle = {Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming},
pages = {434–447},
numpages = {14},
keywords = {recursion, Session types},
location = {Nara, Japan},
series = {ICFP 2016}
}

@inproceedings{bernardi14,
  title={On Duality Relations for Session Types},
  author={Giovanni Tito Bernardi and Ornela Dardha and Simon J. Gay and Dimitrios Kouzapas},
  booktitle={TGC},
  year={2014}
}

@article{honda16,
author = {Honda, Kohei and Yoshida, Nobuko and Carbone, Marco},
title = {Multiparty Asynchronous Session Types},
year = {2016},
issue_date = {March 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {63},
number = {1},
issn = {0004-5411},
url = {https://doi.org/10.1145/2827695},
doi = {10.1145/2827695},
journal = {J. ACM},
month = {mar},
articleno = {9},
numpages = {67},
keywords = {the pi-calculus, global types, projection, global protocols, progress, Session types}
}

@article{milner92,
title = {A calculus of mobile processes, I},
journal = {Information and Computation},
volume = {100},
number = {1},
pages = {1-40},
year = {1992},
issn = {0890-5401},
doi = {https://doi.org/10.1016/0890-5401(92)90008-4},
url = {https://www.sciencedirect.com/science/article/pii/0890540192900084},
author = {Robin Milner and Joachim Parrow and David Walker},
}

@inproceedings{muijnck-hughes19,
  title={Value-Dependent Session Design in a Dependently Typed Language},
  author={Jan de Muijnck-Hughes and Edwin C. Brady and Wim Vanderbauwhede},
  booktitle={PLACES@ETAPS},
  year={2019}
}

@article{abramsky94,
title = {Proofs as processes},
journal = {Theoretical Computer Science},
volume = {135},
number = {1},
pages = {5-9},
year = {1994},
issn = {0304-3975},
doi = {https://doi.org/10.1016/0304-3975(94)00103-0},
url = {https://www.sciencedirect.com/science/article/pii/0304397594001030},
author = {Samson Abramsky}
}

@article{gay10,
author = {Gay, Simon and Vasconcelos, Vasco},
year = {2010},
month = {01},
pages = {19-50},
title = {Linear type theory for asynchronous session types},
volume = {20},
journal = {J. Funct. Program.},
doi = {10.1017/S0956796809990268}
}

@article{hinrichsen20,
author = {Hinrichsen, Jonas Kastberg and Bengtson, Jesper and Krebbers, Robbert},
title = {Actris: Session-Type Based Reasoning in Separation Logic},
year = {2019},
issue_date = {January 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {POPL},
url = {https://doi.org/10.1145/3371074},
doi = {10.1145/3371074},
journal = {Proc. ACM Program. Lang.},
month = {dec},
articleno = {6},
numpages = {30},
keywords = {Message passing, session types, actor model, concurrency, Iris}
}

@InProceedings{pfenning11,
author="Pfenning, Frank and Caires, Luis and Toninho, Bernardo",
editor="Jouannaud, Jean-Pierre and Shao, Zhong",
title="Proof-Carrying Code in a Session-Typed Process Calculus",
booktitle="Certified Programs and Proofs",
year="2011",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="21--36",
isbn="978-3-642-25379-9"
}

@inbook{toninho18,
author = {Toninho, Bernardo and Yoshida, Nobuko},
year = {2018},
month = {04},
pages = {128-145},
title = {Depending on Session-Typed Processes},
isbn = {978-3-319-89365-5},
doi = {10.1007/978-3-319-89366-2_7}
}

@misc{fu23,
      title={A Two-Level Linear Dependent Type Theory}, 
      author={Qiancheng Fu and Hongwei Xi},
      year={2023},
      eprint={2309.08673},
      archivePrefix={arXiv},
      primaryClass={cs.PL}
}

@InProceedings{gommerstadt18,
author="Gommerstadt, Hannah
and Jia, Limin
and Pfenning, Frank",
editor="Ahmed, Amal",
title="Session-Typed Concurrent Contracts",
booktitle="Programming Languages and Systems",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="771--798",
abstract="In sequential languages, dynamic contracts are usually expressed as boolean functions without externally observable effects, written within the language. We propose an analogous notion of concurrent contracts for languages with session-typed message-passing concurrency. Concurrent contracts are partial identity processes that monitor the bidirectional communication along channels and raise an alarm if a contract is violated. Concurrent contracts are session-typed in the usual way and must also satisfy a transparency requirement, which guarantees that terminating compliant programs with and without the contracts are observationally equivalent. We illustrate concurrent contracts with several examples. We also show how to generate contracts from a refinement session-type system and show that the resulting monitors are redundant for programs that are well-typed.",
isbn="978-3-319-89884-1"
}

@inproceedings{willsey16,
  author       = {Max Willsey and
                  Rokhini Prabhu and
                  Frank Pfenning},
  editor       = {Iliano Cervesato and
                  Maribel Fern{\'{a}}ndez},
  title        = {Design and Implementation of Concurrent {C0}},
  booktitle    = {Proceedings Fourth International Workshop on Linearity, {LINEARITY}
                  2016, Porto, Portugal, 25 June 2016},
  series       = {{EPTCS}},
  volume       = {238},
  pages        = {73--82},
  year         = {2016},
  url          = {https://doi.org/10.4204/EPTCS.238.8},
  doi          = {10.4204/EPTCS.238.8},
  timestamp    = {Fri, 30 Nov 2018 13:24:58 +0100},
  biburl       = {https://dblp.org/rec/journals/corr/WillseyPP17.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{bernardo13,
author="Toninho, Bernardo
and Caires, Luis
and Pfenning, Frank",
editor="Felleisen, Matthias
and Gardner, Philippa",
title="Higher-Order Processes, Functions, and Sessions: A Monadic Integration",
booktitle="Programming Languages and Systems",
year="2013",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="350--369",
abstract="In prior research we have developed a Curry-Howard interpretation of linear sequent calculus as session-typed processes. In this paper we uniformly integrate this computational interpretation in a functional language via a linear contextual monad that isolates session-based concurrency. Monadic values are open process expressions and are first class objects in the language, thus providing a logical foundation for higher-order session typed processes. We illustrate how the combined use of the monad and recursive types allows us to cleanly write a rich variety of concurrent programs, including higher-order programs that communicate processes. We show the standard metatheoretic result of type preservation, as well as a global progress theorem, which to the best of our knowledge, is new in the higher-order session typed setting.",
isbn="978-3-642-37036-6"
}

@inproceedings{das20,
author = {Das, Ankush and Pfenning, Frank},
title = {Verified Linear Session-Typed Concurrent Programming},
year = {2020},
isbn = {9781450388214},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3414080.3414087},
doi = {10.1145/3414080.3414087},
abstract = {We present a system of linear session types that integrates several features aimed at verification of different properties of concurrent programs, specifically types indexed with arithmetic expressions, linear constraints and quantification. We prove the standard type safety properties of session fidelity and deadlock freedom. In order to control the verbosity of programs we introduce implicit syntax and an algorithm for reconstruction, which is complete under some mild assumptions on the structure of types. We then illustrate the expressive power of our language (called Rast) with a variety of examples, including normalization for the linear λ-calculus, balanced ternary arithmetic, binary counters and tries.},
booktitle = {Proceedings of the 22nd International Symposium on Principles and Practice of Declarative Programming},
articleno = {7},
numpages = {15},
keywords = {Session types, Concurrency, Linear types, Verification},
location = {Bologna, Italy},
series = {PPDP '20}
}

@article{actris,
author = {Hinrichsen, Jonas Kastberg and Bengtson, Jesper and Krebbers, Robbert},
title = {Actris: Session-Type Based Reasoning in Separation Logic},
year = {2019},
issue_date = {January 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {POPL},
url = {https://doi.org/10.1145/3371074},
doi = {10.1145/3371074},
abstract = {Message passing is a useful abstraction to implement concurrent programs. For real-world systems, however, it is often combined with other programming and concurrency paradigms, such as higher-order functions, mutable state, shared-memory concurrency, and locks. We present Actris: a logic for proving functional correctness of programs that use a combination of the aforementioned features. Actris combines the power of modern concurrent separation logics with a first-class protocol mechanism—based on session types—for reasoning about message passing in the presence of other concurrency paradigms. We show that Actris provides a suitable level of abstraction by proving functional correctness of a variety of examples, including a distributed merge sort, a distributed load-balancing mapper, and a variant of the map-reduce model, using relatively simple specifications. Soundness of Actris is proved using a model of its protocol mechanism in the Iris framework. We mechanised the theory of Actris, together with tactics for symbolic execution of programs, as well as all examples in the paper, in the Coq proof assistant.},
journal = {Proc. ACM Program. Lang.},
month = {dec},
articleno = {6},
numpages = {30},
keywords = {actor model, Message passing, concurrency, session types, Iris}
}

@inproceedings{miller91,
  title={Unification of Simply Typed Lamda-Terms as Logic Programming},
  author={Dale A. Miller},
  booktitle={International Conference on Logic Programming},
  year={1991},
  url={https://api.semanticscholar.org/CorpusID:451294}
}

@article{goldfarb81,
title = {The undecidability of the second-order unification problem},
journal = {Theoretical Computer Science},
volume = {13},
number = {2},
pages = {225-230},
year = {1981},
issn = {0304-3975},
doi = {https://doi.org/10.1016/0304-3975(81)90040-2},
url = {https://www.sciencedirect.com/science/article/pii/0304397581900402},
author = {Warren D. Goldfarb},
abstract = {It is shown that there is no effective procedure for determining whether or not two terms of the language of second-order logic have a common instance.}
}

@article{cockx18,
author = {Cockx, Jesper and Abel, Andreas},
title = {Elaborating Dependent (Co)Pattern Matching},
year = {2018},
issue_date = {September 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2},
number = {ICFP},
url = {https://doi.org/10.1145/3236770},
doi = {10.1145/3236770},
abstract = {In a dependently typed language, we can guarantee correctness of our programs by providing formal proofs. To check them, the typechecker elaborates these programs and proofs into a low level core language. However, this core language is by nature hard to understand by mere humans, so how can we know we proved the right thing? This question occurs in particular for dependent copattern matching, a powerful language construct for writing programs and proofs by dependent case analysis and mixed induction/coinduction. A definition by copattern matching consists of a list of clauses that are elaborated to a case tree, which can be further translated to primitive eliminators. In previous work this second step has received a lot of attention, but the first step has been mostly ignored so far. We present an algorithm elaborating definitions by dependent copattern matching to a core language with inductive datatypes, coinductive record types, an identity type, and constants defined by well-typed case trees. To ensure correctness, we prove that elaboration preserves the first-match semantics of the user clauses. Based on this theoretical work, we reimplement the algorithm used by Agda to check left-hand sides of definitions by pattern matching. The new implementation is at the same time more general and less complex, and fixes a number of bugs and usability issues with the old version. Thus we take another step towards the formally verified implementation of a practical dependently typed language.},
journal = {Proc. ACM Program. Lang.},
month = {jul},
articleno = {75},
numpages = {30},
keywords = {Copatterns, Agda, Dependent types, Dependent pattern matching}
}

@article{abramsky93,
  title   = {Computational interpretations of linear logic},
  journal = {Theoretical Computer Science},
  volume  = {111},
  number  = {1},
  pages   = {3-57},
  year    = {1993},
  issn    = {0304-3975},
  doi     = {https://doi.org/10.1016/0304-3975(93)90181-R},
  url     = {https://www.sciencedirect.com/science/article/pii/030439759390181R},
  author  = {Samson Abramsky}
}

@INPROCEEDINGS{reynolds02,
  author={Reynolds, J.C.},
  booktitle={Proceedings 17th Annual IEEE Symposium on Logic in Computer Science}, 
  title={Separation logic: a logic for shared mutable data structures}, 
  year={2002},
  volume={},
  number={},
  pages={55-74},
  doi={10.1109/LICS.2002.1029817}
}

@article{das20-1,
  author       = {Ankush Das and
                  Frank Pfenning},
  title        = {Session Types with Arithmetic Refinements and Their Application to
                  Work Analysis},
  journal      = {CoRR},
  volume       = {abs/2001.04439},
  year         = {2020},
  url          = {https://arxiv.org/abs/2001.04439},
  eprinttype    = {arXiv},
  eprint       = {2001.04439},
  timestamp    = {Fri, 17 Jan 2020 14:07:30 +0100},
  biburl       = {https://dblp.org/rec/journals/corr/abs-2001-04439.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@InProceedings{rast,
  author =	{Das, Ankush and Pfenning, Frank},
  title =	{{Rast: Resource-Aware Session Types with Arithmetic Refinements}},
  booktitle =	{5th International Conference on Formal Structures for Computation and Deduction (FSCD 2020)},
  pages =	{33:1--33:17},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-155-9},
  ISSN =	{1868-8969},
  year =	{2020},
  volume =	{167},
  editor =	{Ariola, Zena M.},
  publisher =	{Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.FSCD.2020.33},
  URN =		{urn:nbn:de:0030-drops-123558},
  doi =		{10.4230/LIPIcs.FSCD.2020.33},
  annote =	{Keywords: Session Types, Resource Analysis, Refinement Types}
}

@book{cpdt,
author = {Chlipala, Adam},
title = {Certified Programming with Dependent Types: A Pragmatic Introduction to the Coq Proof Assistant},
year = {2013},
isbn = {0262026651},
publisher = {The MIT Press},
abstract = {The technology of mechanized program verification can play a supporting role in many kinds of research projects in computer science, and related tools for formal proof-checking are seeing increasing adoption in mathematics and engineering. This book provides an introduction to the Coq software for writing and checking mathematical proofs. It takes a practical engineering focus throughout, emphasizing techniques that will help users to build, understand, and maintain large Coq developments and minimize the cost of code change over time. Two topics, rarely discussed elsewhere, are covered in detail: effective dependently typed programming (making productive use of a feature at the heart of the Coq system) and construction of domain-specific proof tactics. Almost every subject covered is also relevant to interactive computer theorem proving in general, not just program verification, demonstrated through examples of verified programs applied in many different sorts of formalizations. The book develops a unique automated proof style and applies it throughout; even experienced Coq users may benefit from reading about basic Coq concepts from this novel perspective. The book also offers a library of tactics, or programs that find proofs, designed for use with examples in the book. Readers will acquire the necessary skills to reimplement these tactics in other settings by the end of the book. All of the code appearing in the book is freely available online.}
}

@article{ohearn99,
  title = {The {Logic} of {Bunched} {Implications}},
  volume = {5},
  copyright = {https://www.cambridge.org/core/terms},
  issn = {1079-8986, 1943-5894},
  url = {https://www.cambridge.org/core/product/identifier/S1079898600007022/type/journal_article},
  doi = {10.2307/421090},
  abstract = {We introduce a logic BI in which a multiplicative (or linear) and an addi intuitionistic) implication live side-by-side. The propositional version of BI arises fr analysis of the proof-theoretic relationship between conjunction and implication; it viewed as a merging of intuitionistic logic and multiplicative intuitionistic linear lo naturality of BI can be seen categorically: models of propositional BI's proofs are gi bicartesian doubly closed categories, i.e., categories which freely combine the sema propositional intuitionistic logic and propositional multiplicative intuitionistic linea The predicate version of BI includes, in addition to standard additive quantifiers plicative (or intensional) quantifiers Vnew and 3new which arise from observing res on structural rules on the level of terms as well as propositions. We discuss comput interpretations, based on sharing, at both the propositional and predicate levels.},
  language = {en},
  number = {2},
  urldate = {2025-10-01},
  journal = {Bulletin of Symbolic Logic},
  author = {O'Hearn, Peter W. and Pym, David J.},
  month = jun,
  year = {1999},
  pages = {215--244},
  file = {PDF:/Users/qianchengfu/Zotero/storage/EP63I7T7/O'Hearn and Pym - 1999 - The Logic of Bunched Implications.pdf:application/pdf},
}

@article{ohearn03,
  title = {On bunched typing},
  volume = {13},
  copyright = {https://www.cambridge.org/core/terms},
  issn = {0956-7968, 1469-7653},
  url = {https://www.cambridge.org/core/product/identifier/S0956796802004495/type/journal_article},
  doi = {10.1017/S0956796802004495},
  abstract = {We study a typing scheme derived from a semantic situation where a single category possesses several closed structures, corresponding to diﬀerent varieties of function type. In this scheme typing contexts are trees built from two (or more) binary combining operations, or in short, bunches. Bunched typing and its logical counterpart, bunched implications, have arisen in joint work of the author and David Pym. The present paper gives a basic account of the type system, and then focusses on concrete models that illustrate how it may be understood in terms of resource access and sharing.},
  language = {en},
  number = {4},
  urldate = {2025-09-02},
  journal = {Journal of Functional Programming},
  author = {O'Hearn, Peter},
  month = jul,
  year = {2003},
  pages = {747--796},
  file = {PDF:/Users/qianchengfu/Zotero/storage/M3M47LGM/O'Hearn - 2003 - On bunched typing.pdf:application/pdf},
}
